!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!JavaScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!JavaScript	G,getter	/getters/
!_TAG_KIND_DESCRIPTION!JavaScript	M,field	/fields/
!_TAG_KIND_DESCRIPTION!JavaScript	S,setter	/setters/
!_TAG_KIND_DESCRIPTION!JavaScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!JavaScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!JavaScript	g,generator	/generators/
!_TAG_KIND_DESCRIPTION!JavaScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!JavaScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!JavaScript	v,variable	/global variables/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Repos/Pixijs/PokerClient/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/67ad22e/
ALLIN	scripts/DataTypes.ts	/^    ALLIN = "allin",$/;"	e	enum:SocketSendMsg
ALLIN	scripts/DataTypes.ts	/^    ALLIN$/;"	e	enum:BidState
App	scripts/App.ts	/^export class App {$/;"	c
AttackState	scripts/States/aiStates.js	/^export class AttackState extends States$/;"	c
AvatarPositions	scripts/Globals.ts	/^export const AvatarPositions = [$/;"	C
AvatarStates	scripts/DataTypes.ts	/^export const enum AvatarStates {$/;"	g
BLIND	scripts/DataTypes.ts	/^    BLIND = "blind",$/;"	e	enum:SocketRecievedMsg
Background	scripts/Background.ts	/^export class Background extends PIXI.TilingSprite {$/;"	c
BackgroundGraphic	scripts/Background.ts	/^export class BackgroundGraphic extends PIXI.Graphics$/;"	c
BackgroundImage	scripts/Background.ts	/^export class BackgroundImage extends PIXI.Sprite {$/;"	c
BidState	scripts/DataTypes.ts	/^export enum BidState$/;"	g
Button	scripts/Button.ts	/^export class Button extends Sprite$/;"	c
CALL	scripts/DataTypes.ts	/^    CALL = "call",$/;"	e	enum:SocketSendMsg
CALL	scripts/DataTypes.ts	/^    CALL,$/;"	e	enum:BidState
CALL_AMT	scripts/DataTypes.ts	/^    CALL_AMT = "callAmt"$/;"	e	enum:SocketRecievedMsg
CARDDISTRIBUTION	scripts/DataTypes.ts	/^	CARDDISTRIBUTION,$/;"	e	enum:GAMESTATE
CARD_WITHDRAW	scripts/DataTypes.ts	/^    CARD_WITHDRAW = "cardWithdraw",$/;"	e	enum:SocketRecievedMsg
CHECK	scripts/DataTypes.ts	/^    CHECK = "check",$/;"	e	enum:SocketSendMsg
CHECK	scripts/DataTypes.ts	/^    CHECK,$/;"	e	enum:BidState
CLOSE	scripts/Prompt.ts	/^    CLOSE,$/;"	e	enum:PromptResponseType
CONNECT	scripts/DataTypes.ts	/^    CONNECT = "connect",$/;"	e	enum:SocketSendMsg
CalculateScaleFactor	scripts/appConfig.ts	/^export const CalculateScaleFactor = () => {$/;"	C
Call	scripts/MyEmitter.ts	/^    Call(msgType:string, msgParams = {})$/;"	m	class:MyEmitter
Card	scripts/Card.ts	/^export class Card$/;"	c
CardsInHand	scripts/Globals.ts	/^    CardsInHand : [],$/;"	C
CardsPosition	scripts/Globals.ts	/^export const CardsPosition = [$/;"	C
Chip	scripts/Chip.ts	/^export class Chip extends Sprite$/;"	c
CollectState	scripts/States/aiStates.js	/^export class CollectState extends States$/;"	c
Condition	scripts/States/aiStates.js	/^            Condition : condition$/;"	p	variable:States.addTransition.transition
Config	scripts/Globals.ts	/^export const Config = {$/;"	C
ConvertToCard	scripts/Utilities.ts	/^export const ConvertToCard = (cardId: string) : string => $/;"	C
CurrentGameData	scripts/Globals.ts	/^export const CurrentGameData : currentGameDataType = {$/;"	C
DISCONNECT	scripts/DataTypes.ts	/^    DISCONNECT,$/;"	e	enum:AvatarStates
DISCONNECTED	scripts/DataTypes.ts	/^    DISCONNECTED$/;"	e	enum:PLAYERSTATE
DROPPED	scripts/DataTypes.ts	/^    DROPPED,$/;"	e	enum:AvatarStates
DebugCircle	scripts/DebugCircle.ts	/^export class DebugCircle extends PIXI.Graphics$/;"	c
ERROR	scripts/DataTypes.ts	/^    ERROR = "error",$/;"	e	enum:SocketRecievedMsg
ERROR	scripts/DataTypes.ts	/^    ERROR$/;"	e	enum:LEAVESTATE
EscapeState	scripts/States/aiStates.js	/^export class EscapeState extends States$/;"	c
FOLD	scripts/DataTypes.ts	/^    FOLD = "fold",$/;"	e	enum:SocketSendMsg
FOLDED	scripts/DataTypes.ts	/^    FOLDED,$/;"	e	enum:PLAYERSTATE
FinalScene	scripts/FinalScene.ts	/^export class FinalScene extends Scene$/;"	c
GAMEENDED	scripts/DataTypes.ts	/^    GAMEENDED = "gameEnded",$/;"	e	enum:SocketRecievedMsg
GAMEPLAY_TIMER	scripts/DataTypes.ts	/^    GAMEPLAY_TIMER = "timer",$/;"	e	enum:SocketRecievedMsg
GAMESTATE	scripts/DataTypes.ts	/^export const enum GAMESTATE$/;"	g
GAME_START_MSG	scripts/DataTypes.ts	/^    GAME_START_MSG = "GAMESTARTMSG",$/;"	e	enum:SocketRecievedMsg
GameConfig	scripts/Globals.ts	/^export const GameConfig = {$/;"	C
GameScene	scripts/GameScene.ts	/^export class GameScene extends Scene$/;"	c
Globals	scripts/Globals.ts	/^export const Globals : globalDataType = {$/;"	C
INGAME	scripts/DataTypes.ts	/^	INGAME,$/;"	e	enum:GAMESTATE
INGAME	scripts/DataTypes.ts	/^    INGAME,$/;"	e	enum:AvatarStates
INGAME	scripts/DataTypes.ts	/^    INGAME,$/;"	e	enum:PLAYERSTATE
INTERNETDISCONNECTION	scripts/DataTypes.ts	/^    INTERNETDISCONNECTION,$/;"	e	enum:LEAVESTATE
InGameMessage	scripts/InGameMessage.ts	/^export class InGameMessage$/;"	c
JOINED	scripts/DataTypes.ts	/^    JOINED = "joined",$/;"	e	enum:SocketRecievedMsg
KICKED	scripts/DataTypes.ts	/^    KICKED,$/;"	e	enum:AvatarStates
KICKEDPLAYERS	scripts/DataTypes.ts	/^    KICKEDPLAYERS = "kickedPlayers",$/;"	e	enum:SocketRecievedMsg
KeyPad	scripts/Keypad.ts	/^export class KeyPad extends Container$/;"	c
LEAVESTATE	scripts/DataTypes.ts	/^export const enum LEAVESTATE$/;"	g
LEFT	scripts/DataTypes.ts	/^    LEFT,$/;"	e	enum:LEAVESTATE
LEFT	scripts/DataTypes.ts	/^    LEFT,$/;"	e	enum:PLAYERSTATE
Loader	scripts/Loader.ts	/^export class Loader {$/;"	c
LoaderConfig	scripts/LoaderConfig.ts	/^export const LoaderConfig = {$/;"	C
LoaderSoundConfig	scripts/LoaderConfig.ts	/^export const LoaderSoundConfig : any = {$/;"	C
MAIN	scripts/App.ts	/^const MAIN = require('.\/main');$/;"	C
MAIN	scripts/index.ts	/^const MAIN = require(".\/main");$/;"	C
MATCHMAKING	scripts/DataTypes.ts	/^	MATCHMAKING,$/;"	e	enum:GAMESTATE
MainScene	scripts/MainScene.ts	/^export class MainScene extends Scene$/;"	c
MyEmitter	scripts/MyEmitter.ts	/^export class MyEmitter \/\/extends PIXI.utils.EventEmitter$/;"	c
NEXT_TURN	scripts/DataTypes.ts	/^    NEXT_TURN = "nextPlayerTurnMsg",$/;"	e	enum:SocketRecievedMsg
NONE	scripts/Prompt.ts	/^    NONE,$/;"	e	enum:PromptResponseType
NOSTATE	scripts/DataTypes.ts	/^    NOSTATE$/;"	e	enum:AvatarStates
NULL	scripts/DataTypes.ts	/^    NULL,$/;"	e	enum:BidState
PADD	scripts/DataTypes.ts	/^    PADD = "pAdd",$/;"	e	enum:SocketRecievedMsg
PFOLDED	scripts/DataTypes.ts	/^    PFOLDED = "plFolded",$/;"	e	enum:SocketRecievedMsg
PING	scripts/DataTypes.ts	/^    PING = "ping",$/;"	e	enum:SocketSendMsg
PLAYERSTATE	scripts/DataTypes.ts	/^export enum PLAYERSTATE {$/;"	g
PLAYER_CARDS	scripts/DataTypes.ts	/^    PLAYER_CARDS = "plCardsMsg",$/;"	e	enum:SocketRecievedMsg
PLEFT	scripts/DataTypes.ts	/^    PLEFT = "pLeft",$/;"	e	enum:SocketRecievedMsg
PONG	scripts/DataTypes.ts	/^    PONG = "pong",$/;"	e	enum:SocketRecievedMsg
POTUPDATE	scripts/DataTypes.ts	/^    POTUPDATE = "potUpdate",$/;"	e	enum:SocketRecievedMsg
PREJOIN	scripts/DataTypes.ts	/^    PREJOIN = "plRejoin",$/;"	e	enum:SocketRecievedMsg
PTIMER	scripts/DataTypes.ts	/^    PTIMER = "turnTimer",$/;"	e	enum:SocketRecievedMsg
Player	scripts/Player.ts	/^export class Player$/;"	c
PlayerData	scripts/DataTypes.ts	/^export class PlayerData$/;"	c
PlayersList	scripts/Globals.ts	/^export const PlayersList : {[index:number] : PlayerData} = {};$/;"	C
Pot	scripts/Pot.ts	/^export class Pot extends Sprite$/;"	c
PotContainer	scripts/Pot.ts	/^export class PotContainer extends Container$/;"	c
Prompt	scripts/Prompt.ts	/^export class Prompt$/;"	c
PromptResponseType	scripts/Prompt.ts	/^export const enum PromptResponseType {$/;"	g
RAISE	scripts/DataTypes.ts	/^    RAISE = "raise",$/;"	e	enum:SocketSendMsg
RECONNECT	scripts/DataTypes.ts	/^    RECONNECT = "reconnect",$/;"	e	enum:SocketSendMsg
RECONNECTAGAIN	scripts/DataTypes.ts	/^    RECONNECTAGAIN = "reconnectAgain",$/;"	e	enum:SocketRecievedMsg
REJOINED	scripts/DataTypes.ts	/^    REJOINED = "rejoined",$/;"	e	enum:SocketRecievedMsg
RESTARTING	scripts/DataTypes.ts	/^	RESTARTING$/;"	e	enum:GAMESTATE
RESULT	scripts/DataTypes.ts	/^	RESULT,$/;"	e	enum:GAMESTATE
RESULT	scripts/DataTypes.ts	/^    RESULT = "resultMsg",$/;"	e	enum:SocketRecievedMsg
RaisePanel	scripts/RaisePanel.ts	/^export class RaisePanel extends Container$/;"	c
ReconnectScene	scripts/ReconnectScene.ts	/^export class ReconnectScene extends Scene$/;"	c
ResetAllData	scripts/Globals.ts	/^export const ResetAllData = () => {$/;"	C
ResetData	scripts/Globals.ts	/^export const ResetData = () => {$/;"	C
ResultData	scripts/DataTypes.ts	/^export class ResultData$/;"	c
ResultDataList	scripts/Globals.ts	/^export const ResultDataList : ResultData[] = [];$/;"	C
ResultScene	scripts/ResultScene.ts	/^export class ResultScene extends Scene$/;"	c
SUIT	scripts/DataTypes.ts	/^export const SUIT= [$/;"	C
SWITCH	scripts/DataTypes.ts	/^    SWITCH = "switchTable",$/;"	e	enum:SocketSendMsg
SWITCH_FAILED	scripts/DataTypes.ts	/^    SWITCH_FAILED = "switchFailed",$/;"	e	enum:SocketRecievedMsg
Scene	scripts/Scene.ts	/^export abstract class Scene$/;"	c
SceneManager	scripts/SceneManager.ts	/^export class SceneManager {$/;"	c
Slider	scripts/Slider.ts	/^export class Slider extends Graphics$/;"	c
SliderDirection	scripts/Slider.ts	/^export enum SliderDirection {$/;"	g
SocketManager	scripts/GameScene.ts	/^            SocketManager.instance?.sendMessage(payload);$/;"	C	method:GameScene.onRaiseClick
SocketManager	scripts/GameScene.ts	/^        SocketManager.instance?.sendMessage(payload);       $/;"	C	method:GameScene.onAllInClick
SocketManager	scripts/GameScene.ts	/^        SocketManager.instance?.sendMessage(payload);$/;"	C	method:GameScene.onCallClick
SocketManager	scripts/SocketManager.ts	/^export class SocketManager$/;"	c
SocketRecievedMsg	scripts/DataTypes.ts	/^export const enum SocketRecievedMsg {$/;"	g
SocketSendMsg	scripts/DataTypes.ts	/^export const enum SocketSendMsg {$/;"	g
States	scripts/States/aiStates.js	/^export class States$/;"	c
THREESKIPS	scripts/DataTypes.ts	/^    THREESKIPS = "THREESKIPS",$/;"	e	enum:SocketRecievedMsg
THREESKIPS	scripts/DataTypes.ts	/^    THREESKIPS,$/;"	e	enum:LEAVESTATE
TURNSKIPPED	scripts/DataTypes.ts	/^    TURNSKIPPED = "turnSkipped",$/;"	e	enum:SocketRecievedMsg
TestingManager	scripts/TestingManager.ts	/^export class TestingManager$/;"	c
TextLabel	scripts/TextLabel.ts	/^export class TextLabel extends  Text$/;"	c
To	scripts/States/aiStates.js	/^            To : to,$/;"	p	variable:States.addTransition.transition
Transition	scripts/States/aiStates.js	/^export const Transition = (to, condition) => {$/;"	f
Vertical	scripts/Slider.ts	/^    Vertical$/;"	e	enum:SliderDirection
WAITING	scripts/DataTypes.ts	/^    WAITING,$/;"	e	enum:AvatarStates
WAITING	scripts/DataTypes.ts	/^    WAITING,$/;"	e	enum:PLAYERSTATE
WAIT_TIMER	scripts/DataTypes.ts	/^    WAIT_TIMER = "waitTimer",$/;"	e	enum:SocketRecievedMsg
YESORNO	scripts/Prompt.ts	/^    YESORNO,$/;"	e	enum:PromptResponseType
activeButtons	scripts/GameScene.ts	/^            const activeButtons : Sprite[] = [];$/;"	C	method:GameScene.setButtonsVisual
addButton	scripts/Keypad.ts	/^    addButton(value : string, x : number, y : number, isSprite : boolean = false)$/;"	m	class:KeyPad
addPlayer	scripts/GameScene.ts	/^    addPlayer(plData: PlayerData) {$/;"	m	class:GameScene
addPlayerAvatars	scripts/GameScene.ts	/^    addPlayerAvatars()$/;"	m	class:GameScene
addPot	scripts/Pot.ts	/^    addPot(pot : Pot)$/;"	m	class:PotContainer
addSelfPlayer	scripts/GameScene.ts	/^    addSelfPlayer()$/;"	m	class:GameScene
addToPot	scripts/GameScene.ts	/^    addToPot(pot : potType[]) {$/;"	m	class:GameScene
addToScene	scripts/Scene.ts	/^    addToScene(obj : DisplayObject)$/;"	m	class:Scene
addTransition	scripts/States/aiStates.js	/^    addTransition(to, condition)$/;"	m	class:States
allInButton	scripts/GameScene.ts	/^    allInButton: Button;$/;"	p	class:GameScene
amount	scripts/DataTypes.ts	/^    amount : number,$/;"	p	interface:potType
amount	scripts/DataTypes.ts	/^    amount : number;$/;"	p	class:ResultData
amount	scripts/Pot.ts	/^    amount : number;$/;"	p	class:Pot
amountLabel	scripts/Chip.ts	/^    amountLabel: TextLabel;$/;"	p	class:Chip
amountText	scripts/ResultScene.ts	/^        const amountText = new TextLabel(0, 0, 0, result.amount.toString(), 32, 0xffffff);$/;"	C
amountToCall	scripts/GameScene.ts	/^    amountToCall: number = -1;$/;"	p	class:GameScene
amt	scripts/GameScene.ts	/^                amt : this.raisePanel.getAmount(),$/;"	C	method:GameScene.onRaiseClick
amt	scripts/GameScene.ts	/^            amt : this.amountToCall,$/;"	C	method:GameScene.onCallClick
amt	scripts/RaisePanel.ts	/^        let amt = value * (this.maxRaiseAmt - this.minRaiseAmt) + this.minRaiseAmt;$/;"	v
amtToCall	scripts/GameScene.ts	/^    amtToCall : number, $/;"	p	interface:onRejoinData
app	scripts/App.ts	/^    app : PIXI.Application;$/;"	p	class:App
assignPlayerCards	scripts/GameScene.ts	/^    assignPlayerCards()$/;"	m	class:GameScene
avatar	scripts/Player.ts	/^        const avatar = Sprite.from(data!.avatarURL);$/;"	C
avatarAspect	scripts/Player.ts	/^        const avatarAspect = avatar.height\/avatar.width;$/;"	C
avatarBox	scripts/Player.ts	/^        const avatarBox = new Sprite(Globals.resources.avatarBox.texture);$/;"	C
avatarMask	scripts/Player.ts	/^        const avatarMask = new Sprite(Globals.resources.avatarMask.texture);$/;"	C
background	scripts/Loader.ts	/^        const background = new BackgroundGraphic(window.innerWidth, window.innerHeight, 0x80C8BC/;"	C	method:Loader.createLoadingPage
bg	scripts/InGameMessage.ts	/^        const bg = new Sprite(Globals.resources.messageBox.texture);$/;"	C	method:InGameMessage.constructor
bg	scripts/Prompt.ts	/^        const bg = new Sprite(Globals.resources.promptBg.texture);$/;"	C
bgGraphic	scripts/Keypad.ts	/^    bgGraphic : Graphics;$/;"	p	class:KeyPad
bidState	scripts/GameScene.ts	/^    bidState : BidState$/;"	p	interface:onRejoinData
boxData	scripts/Loader.ts	/^        const boxData = {$/;"	C	method:Loader.createLoadingPage
btn	scripts/Prompt.ts	/^        const btn = new Sprite(Globals.resources.promptBox.texture);$/;"	C
btnLabel	scripts/Prompt.ts	/^        const btnLabel = new TextLabel(btn.x, btn.y, 0.5, btnText.toUpperCase(), 42, 0x62CB5C, "/;"	C
button	scripts/Keypad.ts	/^       const button = new Graphics();$/;"	C	method:KeyPad.addButton
button	scripts/TestingManager.ts	/^        const button = new Graphics();$/;"	C	method:TestingManager.createButton
buttonContainer	scripts/TestingManager.ts	/^    buttonContainer : Container;$/;"	p	class:TestingManager
buttonDown	scripts/Keypad.ts	/^    buttonDown(value : string, button : Graphics)$/;"	m	class:KeyPad
buttonUp	scripts/Keypad.ts	/^    buttonUp(button : Graphics)$/;"	m	class:KeyPad
callButton	scripts/GameScene.ts	/^    callButton: Button;$/;"	p	class:GameScene
card	scripts/ResultScene.ts	/^                    const card = new Sprite(Globals.resources[ConvertToCard(subCard)].texture);$/;"	C
cardContainer	scripts/GameScene.ts	/^    cardContainer : Container;$/;"	p	class:GameScene
cardContainer	scripts/Player.ts	/^        const cardContainer = new Container();$/;"	C
cardID	scripts/Card.ts	/^    constructor(public cardID : string, position : {x : number, y : number}, parentContainer : C/;"	p	class:Card
cardLastPosition	scripts/GameScene.ts	/^    cardLastPosition : {x : number, y : number} = {x : -330, y : 100};$/;"	p	class:GameScene
cardName	scripts/Utilities.ts	/^    let cardName = "";$/;"	v
cards	scripts/DataTypes.ts	/^    cards : string[];$/;"	p	class:ResultData
cardsContainer	scripts/ResultScene.ts	/^        const cardsContainer = new Container();$/;"	C
characterRatio	scripts/Button.ts	/^            let characterRatio = (this.maxCharacters \/ text.length);$/;"	v
characterRatio	scripts/Button.ts	/^        let characterRatio = (this.maxCharacters \/ text.length);$/;"	v
checkButton	scripts/GameScene.ts	/^    checkButton : Button;$/;"	p	class:GameScene
chipPositions	scripts/Globals.ts	/^export const chipPositions = [$/;"	C
circle	scripts/Player.ts	/^        const circle = new Sprite(Globals.resources.playerChip.texture);$/;"	C
clamp	scripts/Utilities.ts	/^export const clamp = (num : number, min : number, max : number) => Math.min(Math.max(num, min), /;"	C
closeBtn	scripts/RaisePanel.ts	/^        const closeBtn = new Button(Globals.resources.closeBtn.texture, undefined, 0xffffff, {x /;"	C	method:RaisePanel.constructor
closeSocket	scripts/SocketManager.ts	/^    closeSocket()$/;"	m	class:SocketManager
colorData	scripts/ResultScene.ts	/^        const colorData : {[index : string] : number} = {$/;"	C
compareWidth	scripts/ResultScene.ts	/^        const compareWidth = resultBox.width - 100;$/;"	C
config	scripts/appConfig.ts	/^export const config = {$/;"	C
connectToServer	scripts/SocketManager.ts	/^    connectToServer(serverURL : string)$/;"	m	class:SocketManager
constructor	scripts/App.ts	/^    constructor() {$/;"	m	class:App
constructor	scripts/Card.ts	/^    constructor(public cardID : string, position : {x : number, y : number}, parentContainer : C/;"	m	class:Card
constructor	scripts/Chip.ts	/^    constructor(texture :  Texture<Resource> | undefined, amount : number, parentContainer : Con/;"	m	class:Chip
constructor	scripts/DataTypes.ts	/^    constructor(data : any)$/;"	m	class:ResultData
constructor	scripts/DataTypes.ts	/^    constructor(public plId: number = -1,public name: string = "",public avatarURL: string = "",/;"	m	class:PlayerData
constructor	scripts/FinalScene.ts	/^    constructor(textToShow : string, showBtn = false) {$/;"	m	class:FinalScene
constructor	scripts/GameScene.ts	/^    constructor(initPlayersOnStart = false, autoStart = false, isReconnecting = false, onRejoinD/;"	m	class:GameScene
constructor	scripts/InGameMessage.ts	/^    constructor(parentContainer : Container, isCenter = false)$/;"	m	class:InGameMessage
constructor	scripts/Keypad.ts	/^    constructor(x : number, y : number, bgColor : number, callback : (value : string) => void)$/;"	m	class:KeyPad
constructor	scripts/Loader.ts	/^    constructor(public loader : PIXI.Loader, container : PIXI.Container) {$/;"	m	class:Loader
constructor	scripts/MainScene.ts	/^    constructor()$/;"	m	class:MainScene
constructor	scripts/MyEmitter.ts	/^    constructor()$/;"	m	class:MyEmitter
constructor	scripts/Pot.ts	/^    constructor(Pots : Pot[] = [])$/;"	m	class:PotContainer
constructor	scripts/Pot.ts	/^    constructor(potAmount : number, position : {x : number, y : number} = {x : 0, y : 0})$/;"	m	class:Pot
constructor	scripts/RaisePanel.ts	/^    constructor(ref : DisplayObject)$/;"	m	class:RaisePanel
constructor	scripts/ReconnectScene.ts	/^    constructor(public msgToShow : string)$/;"	m	class:ReconnectScene
constructor	scripts/Scene.ts	/^    constructor(mainBackgroundColor : number)$/;"	m	class:Scene
constructor	scripts/SocketManager.ts	/^    public constructor(uuid : number, name : string, tableTypeID : number, avatarURL : string, e/;"	m	class:SocketManager
constructor	scripts/States/aiStates.js	/^    constructor(entity)$/;"	m	class:AttackState
constructor	scripts/States/aiStates.js	/^    constructor(entity)$/;"	m	class:CollectState
constructor	scripts/States/aiStates.js	/^    constructor(entity)$/;"	m	class:EscapeState
constructor	scripts/States/aiStates.js	/^    constructor(entity)$/;"	m	class:States
constructor	scripts/TestingManager.ts	/^    constructor(parentContainer : Container)$/;"	m	class:TestingManager
constructor	scripts/TextLabel.ts	/^    constructor(x : number, y : number, anchor :number, textToShow :string ,size : number,public/;"	m	class:TextLabel
container	scripts/InGameMessage.ts	/^    container : Container;$/;"	p	class:InGameMessage
container	scripts/Player.ts	/^    container : Container;$/;"	p	class:Player
container	scripts/Prompt.ts	/^    container : Container;$/;"	p	class:Prompt
corners	scripts/Player.ts	/^            const corners = [$/;"	C
createButton	scripts/TestingManager.ts	/^    createButton(i: number, connectionId : number, x : number, y : number, width : number, heigh/;"	m	class:TestingManager
createLoadingPage	scripts/Loader.ts	/^    createLoadingPage(container : PIXI.Container)$/;"	m	class:Loader
createPot	scripts/Pot.ts	/^    createPot(potAmount : number)$/;"	m	class:PotContainer
crossBtn	scripts/Prompt.ts	/^        const crossBtn = new Sprite(Globals.resources.closeBtn.texture);$/;"	C
crossBtn	scripts/ResultScene.ts	/^    crossBtn: Button;$/;"	p	class:ResultScene
currentBids	scripts/GameScene.ts	/^    currentBids : {[key : number] : number},$/;"	p	interface:onRejoinData
currentGameDataType	scripts/Globals.ts	/^type currentGameDataType = {$/;"	a
currentTimer	scripts/ReconnectScene.ts	/^    currentTimer: number;$/;"	p	class:ReconnectScene
currentValue	scripts/RaisePanel.ts	/^        const currentValue = parseFloat(this.input.text) - this.minRaiseAmt;$/;"	C
data	scripts/Player.ts	/^        const data = PlayersList[this.plId];$/;"	C
defaultColor	scripts/TextLabel.ts	/^    constructor(x : number, y : number, anchor :number, textToShow :string ,size : number,public/;"	p	class:TextLabel
defineSocketEvents	scripts/SocketManager.ts	/^    defineSocketEvents() {$/;"	m	class:SocketManager
denominator	scripts/Player.ts	/^        const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));$/;"	C
destroyScene	scripts/Scene.ts	/^    destroyScene() {$/;"	m	class:Scene
difference	scripts/RaisePanel.ts	/^        const difference  = this.maxRaiseAmt - this.minRaiseAmt;$/;"	C
dimensions	scripts/Keypad.ts	/^        const dimensions = {width : 250, height : 330};$/;"	C	method:KeyPad.constructor
disable	scripts/InGameMessage.ts	/^    disable()$/;"	m	class:InGameMessage
edge1	scripts/Player.ts	/^        const edge1 = new Graphics();$/;"	C
edge2	scripts/Player.ts	/^        const edge2 = new Graphics();$/;"	C
else	scripts/GameScene.ts	/^        {$/;"	p	class:GameScene
emptySlot	scripts/ResultScene.ts	/^            const emptySlot = new Sprite(Globals.resources.emptyDeck.texture);$/;"	C
endPosition	scripts/Chip.ts	/^    endPosition : {x : number, y : number} | undefined;$/;"	p	class:Chip
errorMsg	scripts/Globals.ts	/^    errorMsg : "",$/;"	C
errorPanel	scripts/RaisePanel.ts	/^    errorPanel(state : boolean)$/;"	m	class:RaisePanel
extraTime	scripts/DataTypes.ts	/^    extraTime : number;$/;"	p	class:PlayerData
extraTime	scripts/Player.ts	/^        const extraTime = PlayersList[this.plId].extraTime;$/;"	C
fetchGlobalPosition	scripts/Utilities.ts	/^export const fetchGlobalPosition = (component : DisplayObject) => {$/;"	C
foldButton	scripts/GameScene.ts	/^    foldButton: Button;$/;"	p	class:GameScene
fontArray	scripts/Loader.ts	/^                const fontArray : any =[];$/;"	C	method:Loader.preload
fontData	scripts/LoaderConfig.ts	/^export const fontData = [$/;"	C
fullBackground	scripts/Scene.ts	/^    private fullBackground : BackgroundGraphic;$/;"	p	class:Scene
gamePlayTimer	scripts/GameScene.ts	/^    gamePlayTimer : TextLabel;$/;"	p	class:GameScene
gameStartAlert	scripts/main.js	/^export function gameStartAlert() {$/;"	f
get	scripts/Globals.ts	/^  get isMobile() {$/;"	C
getDirection	scripts/States/aiStates.js	/^    get getDirection()$/;"	G	class:AttackState
getDirection	scripts/States/aiStates.js	/^    get getDirection()$/;"	G	class:CollectState
getDirection	scripts/States/aiStates.js	/^    get getDirection()$/;"	G	class:EscapeState
getInstance	scripts/SocketManager.ts	/^    public get getInstance() : SocketManager | undefined$/;"	m	class:SocketManager
getMousePosition	scripts/Utilities.ts	/^export const getMousePosition = () => Globals.App!.app.renderer.plugins.interaction.mouse.global/;"	C
getServerURL	scripts/SocketManager.ts	/^    getServerURL()$/;"	m	class:SocketManager
globalDataType	scripts/Globals.ts	/^type globalDataType = {$/;"	a
graphic	scripts/RaisePanel.ts	/^        const graphic = new Graphics();$/;"	C	method:RaisePanel.constructor
half	scripts/Pot.ts	/^            const half = pots.length\/2;$/;"	C	method:PotContainer.updatePosition
handle	scripts/Slider.ts	/^    handle : Graphics;$/;"	p	class:Slider
handleMessage	scripts/SocketManager.ts	/^    handleMessage(data : any) {$/;"	m	class:SocketManager
hasHandleDown	scripts/Slider.ts	/^    private hasHandleDown : boolean = false;$/;"	p	class:Slider
hasStarted	scripts/Globals.ts	/^    hasStarted : false,$/;"	C
height	scripts/Slider.ts	/^        let height = 0;$/;"	v
hit	scripts/Player.ts	/^                const hit = this.intersect(0, 0, x, y, segment[0], segment[1], segment[2], segme/;"	C
i	scripts/Player.ts	/^                const segment = segments[i];$/;"	C
i	scripts/Player.ts	/^            for (let i = 0; i < segments.length; i++) {$/;"	v
i	scripts/Player.ts	/^            for (let i = 0; i < winding; i++) {$/;"	v
i	scripts/Player.ts	/^        for(let i = 0; i < 2; i++)$/;"	v
i	scripts/ResultScene.ts	/^                const subCard = cards[i];$/;"	C
i	scripts/ResultScene.ts	/^            for(let i = 0; i < cards.length; i++)$/;"	v
i	scripts/ResultScene.ts	/^        for(let i = 0; i < ResultDataList.length; i++)$/;"	v
i	scripts/SocketManager.ts	/^                const pData = data.snap[i];$/;"	C	method:SocketManager.handleMessage
inGameMessage	scripts/GameScene.ts	/^    inGameMessage : InGameMessage;$/;"	p	class:GameScene
iniateButtons	scripts/TestingManager.ts	/^    iniateButtons(noOfButtons : number)$/;"	m	class:TestingManager
initScene	scripts/Scene.ts	/^    initScene(container: Container) {$/;"	m	class:Scene
initSelfPlayer	scripts/Globals.ts	/^export const initSelfPlayer : () => PlayerData = () => new PlayerData(CurrentGameData.plID, Curr/;"	C
initText	scripts/InGameMessage.ts	/^    initText(messageToShow : string)$/;"	m	class:InGameMessage
input	scripts/RaisePanel.ts	/^    input: TextLabel;$/;"	p	class:RaisePanel
inputBg	scripts/RaisePanel.ts	/^        const inputBg = new Graphics();$/;"	C	method:RaisePanel.constructor
inputValue	scripts/Keypad.ts	/^    inputValue : string = "";$/;"	p	class:KeyPad
instance	scripts/SceneManager.ts	/^    static instance : SceneManager;$/;"	p	class:SceneManager
instance	scripts/SocketManager.ts	/^    static instance : SocketManager | undefined = undefined;$/;"	p	class:SocketManager
intersection	scripts/Player.ts	/^            let intersection = null;$/;"	v
isActive	scripts/Keypad.ts	/^    isActive : boolean = true;$/;"	p	class:KeyPad
isMobile	scripts/Globals.ts	/^  get isMobile() {$/;"	C
isMyTurn	scripts/Globals.ts	/^    get isMyTurn() {$/;"	C
isRestarted	scripts/ResultScene.ts	/^    isRestarted : boolean = false;$/;"	p	class:ResultScene
isSelf	scripts/DataTypes.ts	/^    isSelf :boolean;$/;"	p	class:PlayerData
keypad	scripts/RaisePanel.ts	/^    keypad : KeyPad;$/;"	p	class:RaisePanel
label	scripts/InGameMessage.ts	/^    label : TextLabel;$/;"	p	class:InGameMessage
label	scripts/Pot.ts	/^    private label : TextLabel;$/;"	p	class:Pot
label	scripts/Prompt.ts	/^    label : TextLabel;$/;"	p	class:Prompt
lastPl	scripts/SocketManager.ts	/^            const lastPl = CurrentGameData.currentTurn;$/;"	C	method:SocketManager.handleMessage
leaveButton	scripts/GameScene.ts	/^    leaveButton : Button;$/;"	p	class:GameScene
leaveGame	scripts/GameScene.ts	/^    leaveGame()$/;"	m	class:GameScene
leaveState	scripts/Globals.ts	/^    leaveState : undefined,$/;"	C
lineSize	scripts/Player.ts	/^                -width \/ 2 - lineSize, -height \/ 2 - lineSize, \/\/ Top left,$/;"	C
lineSize	scripts/Player.ts	/^                [-width \/ 2 + lineSize, -height \/ 2 + lineSize, -width \/ 2 + lineSize, height/;"	C
lineSize	scripts/Player.ts	/^                [-width \/ 2 + lineSize, height \/ 2 - lineSize, width \/ 2 - lineSize, height \//;"	C
lineSize	scripts/Player.ts	/^                [width \/ 2 - lineSize, -height \/ 2 + lineSize, width \/ 2 - lineSize, height \//;"	C
lineSize	scripts/Player.ts	/^                width \/ 2 + lineSize, -height \/ 2 - lineSize, \/\/ Top right$/;"	C
lives	scripts/DataTypes.ts	/^    lives : number;$/;"	p	class:PlayerData
loader	scripts/App.ts	/^        const loader = new Loader(this.app.loader, loaderContainer);$/;"	C	method:App.constructor
loader	scripts/Loader.ts	/^    constructor(public loader : PIXI.Loader, container : PIXI.Container) {$/;"	p	class:Loader
loaderBarContainer	scripts/Loader.ts	/^    loaderBarContainer : PIXI.Container | undefined;$/;"	p	class:Loader
loaderContainer	scripts/App.ts	/^        const loaderContainer = new PIXI.Container();$/;"	C	method:App.constructor
logo	scripts/Loader.ts	/^        const logo = PIXI.Sprite.from(staticData.logoURL);$/;"	C	method:Loader.createLoadingPage
mainBackground	scripts/Scene.ts	/^    private mainBackground : BackgroundGraphic;$/;"	p	class:Scene
mainContainer	scripts/Scene.ts	/^    mainContainer : Container;$/;"	p	class:Scene
mainTimer	scripts/Player.ts	/^        const mainTimer = new Sprite(Globals.resources.playerTimerBg.texture);$/;"	C
mask	scripts/Player.ts	/^        const mask = new Graphics();$/;"	C
mask	scripts/RaisePanel.ts	/^        const mask = new Graphics();$/;"	C	method:RaisePanel.constructor
maxBtn	scripts/RaisePanel.ts	/^    maxBtn: Button;$/;"	p	class:RaisePanel
maxRaiseAmt	scripts/RaisePanel.ts	/^    maxRaiseAmt : number = 100;$/;"	p	class:RaisePanel
maxValue	scripts/Slider.ts	/^    maxValue : number;$/;"	p	class:Slider
minBtn	scripts/RaisePanel.ts	/^    minBtn: Button;$/;"	p	class:RaisePanel
minRaiseAmt	scripts/RaisePanel.ts	/^    minRaiseAmt : number = 10;$/;"	p	class:RaisePanel
minValue	scripts/Slider.ts	/^    minValue : number;$/;"	p	class:Slider
minutes	scripts/GameScene.ts	/^		const minutes = Math.floor(time \/ 60);$/;"	C	method:GameScene.updateTimer
msgToShow	scripts/ReconnectScene.ts	/^    constructor(public msgToShow : string)$/;"	p	class:ReconnectScene
name	scripts/DataTypes.ts	/^    name : string;$/;"	p	class:ResultData
name	scripts/ResultScene.ts	/^        const name = new TextLabel(0, 0, 0, nameStr, 32, 0xffffff);$/;"	C
nameStr	scripts/ResultScene.ts	/^        let nameStr = result.name;$/;"	v
nameText	scripts/Player.ts	/^        const nameText = new TextLabel(0, -avatarBox.height * 0.45, 0.5 , name, 32, 0xffffff, 'B/;"	C
noBtn	scripts/Prompt.ts	/^        const noBtn = new Sprite(Globals.resources.noBtn.texture);$/;"	C
onAllInClick	scripts/GameScene.ts	/^    onAllInClick()$/;"	m	class:GameScene
onButtonPress	scripts/FinalScene.ts	/^    onButtonPress()$/;"	m	class:FinalScene
onButtonPress	scripts/ReconnectScene.ts	/^    onButtonPress()$/;"	m	class:ReconnectScene
onCallClick	scripts/GameScene.ts	/^    onCallClick()$/;"	m	class:GameScene
onCheckClick	scripts/GameScene.ts	/^    onCheckClick()$/;"	m	class:GameScene
onEnter	scripts/States/aiStates.js	/^    onEnter()$/;"	m	class:AttackState
onEnter	scripts/States/aiStates.js	/^    onEnter()$/;"	m	class:CollectState
onEnter	scripts/States/aiStates.js	/^    onEnter()$/;"	m	class:EscapeState
onExit	scripts/States/aiStates.js	/^    onExit()$/;"	m	class:AttackState
onExit	scripts/States/aiStates.js	/^    onExit()$/;"	m	class:CollectState
onExit	scripts/States/aiStates.js	/^    onExit()$/;"	m	class:EscapeState
onFoldClick	scripts/GameScene.ts	/^    onFoldClick()$/;"	m	class:GameScene
onGameStart	scripts/GameScene.ts	/^    onGameStart(isRejoining = false)$/;"	m	class:GameScene
onInputChangeCallback	scripts/Keypad.ts	/^    onInputChangeCallback : (value : string) => void;$/;"	p	class:KeyPad
onInputUpdate	scripts/RaisePanel.ts	/^    onInputUpdate(inputValue : string)$/;"	m	class:RaisePanel
onLeaveClick	scripts/GameScene.ts	/^    onLeaveClick()$/;"	m	class:GameScene
onPlayerDeleted	scripts/GameScene.ts	/^    onPlayerDeleted(plID : number)$/;"	m	class:GameScene
onRaiseClick	scripts/GameScene.ts	/^    onRaiseClick()$/;"	m	class:GameScene
onRaiseErrorClick	scripts/GameScene.ts	/^    onRaiseErrorClick(state : boolean)$/;"	m	class:GameScene
onRejoinData	scripts/GameScene.ts	/^export interface onRejoinData$/;"	i
onRejoined	scripts/GameScene.ts	/^    onRejoined(currentBids : {[key : string] : number}, amtToCall : number,  bidState : BidState/;"	m	class:GameScene
onSwitchClick	scripts/GameScene.ts	/^    onSwitchClick()$/;"	m	class:GameScene
onUpdate	scripts/States/aiStates.js	/^    onUpdate(dt)$/;"	m	class:AttackState
onUpdate	scripts/States/aiStates.js	/^    onUpdate(dt)$/;"	m	class:CollectState
onUpdate	scripts/States/aiStates.js	/^    onUpdate(dt)$/;"	m	class:EscapeState
onlyNumbers	scripts/Utilities.ts	/^export function onlyNumbers(str : string) {$/;"	f
outDir	scripts/Player.ts	/^            let outDir : any = [$/;"	v
pData	scripts/SocketManager.ts	/^                const pData = data.snap[i];$/;"	C	method:SocketManager.handleMessage
pList	scripts/TestingManager.ts	/^        const pList :  {[index:number] : PlayerData} = {$/;"	C	method:TestingManager.pushSampleData
panelConfig	scripts/RaisePanel.ts	/^        const panelConfig = {$/;"	C	method:RaisePanel.constructor
payload	scripts/GameScene.ts	/^            const payload = {$/;"	C	method:GameScene.onRaiseClick
payload	scripts/GameScene.ts	/^        const payload = {$/;"	C	method:GameScene.leaveGame
payload	scripts/GameScene.ts	/^        const payload = {$/;"	C	method:GameScene.onAllInClick
payload	scripts/GameScene.ts	/^        const payload = {$/;"	C	method:GameScene.onCallClick
payload	scripts/GameScene.ts	/^        const payload = {$/;"	C	method:GameScene.onCheckClick
payload	scripts/GameScene.ts	/^        const payload = {$/;"	C	method:GameScene.onFoldClick
payload	scripts/GameScene.ts	/^        const payload = {$/;"	C	method:GameScene.switchTable
phase	scripts/Player.ts	/^            const phase = percentage * (Math.PI * 2);$/;"	C
pingCheckConnection	scripts/ReconnectScene.ts	/^    pingCheckConnection()$/;"	m	class:ReconnectScene
pingServer	scripts/SocketManager.ts	/^    pingServer()$/;"	m	class:SocketManager
pingTimeout	scripts/SocketManager.ts	/^    pingTimeout: NodeJS.Timeout | undefined;$/;"	p	class:SocketManager
plID	scripts/DataTypes.ts	/^    plID : number;$/;"	p	class:ResultData
plID	scripts/Globals.ts	/^    plID : -1, \/\/ Change After testing$/;"	C
plId	scripts/DataTypes.ts	/^    constructor(public plId: number = -1,public name: string = "",public avatarURL: string = "",/;"	p	class:PlayerData
plId	scripts/GameScene.ts	/^            plId : CurrentGameData.plID$/;"	C	method:GameScene.onCheckClick
plId	scripts/GameScene.ts	/^            plId : CurrentGameData.plID$/;"	C	method:GameScene.onFoldClick
plId	scripts/GameScene.ts	/^            plId : CurrentGameData.plID$/;"	C	method:GameScene.switchTable
player	scripts/GameScene.ts	/^            const player = Object.values(this.players)[i];$/;"	C	method:GameScene.assignPlayerCards
player	scripts/GameScene.ts	/^        const player = new Player(plData.plId, plData.name, plData.balance, position, cardPositi/;"	C	method:GameScene.addPlayer
playerAvatarRef	scripts/DataTypes.ts	/^    playerAvatarRef : Player | undefined = undefined;$/;"	p	class:PlayerData
playerData	scripts/SocketManager.ts	/^                const playerData = new PlayerData(pData.plId, pData.pName, pData.pImage, pData.p/;"	C	method:SocketManager.handleMessage
playerData	scripts/SocketManager.ts	/^            const playerData =  new PlayerData(data.plId, data.pName, data.pImage, data.bal, dat/;"	C	method:SocketManager.handleMessage
playerData	scripts/SocketManager.ts	/^            const playerData = new PlayerData(data.plId, data.pName, data.pImage, data.bal, data/;"	C	method:SocketManager.handleMessage
players	scripts/DataTypes.ts	/^    players : number[],$/;"	p	interface:potType
players	scripts/GameScene.ts	/^    players: { [id: number]: Player; };$/;"	p	class:GameScene
point	scripts/DebugCircle.ts	/^        let point = new PIXI.Point();$/;"	v
points	scripts/DataTypes.ts	/^    points : number;$/;"	p	class:ResultData
points	scripts/GameScene.ts	/^                const points = [];$/;"	C	method:GameScene.setButtonsVisual
pos	scripts/Player.ts	/^        let pos = {x : this.balanceText.x, y : this.balanceText.y};$/;"	v
position	scripts/Player.ts	/^        let position = {x : -50, y : 0};$/;"	v
pot	scripts/GameScene.ts	/^    pot: PotContainer;$/;"	p	class:GameScene
pot	scripts/Pot.ts	/^        const pot = new Pot(potAmount);$/;"	C	method:PotContainer.createPot
potType	scripts/DataTypes.ts	/^export interface potType {$/;"	i
pots	scripts/Pot.ts	/^    pots : Pot[];$/;"	p	class:PotContainer
potsPos	scripts/Pot.ts	/^        const potsPos = [];$/;"	C	method:PotContainer.updatePosition
preload	scripts/Loader.ts	/^    preload() {$/;"	m	class:Loader
preloadSounds	scripts/Loader.ts	/^    preloadSounds()$/;"	m	class:Loader
preloaderConfig	scripts/LoaderConfig.ts	/^export const preloaderConfig = {$/;"	C
progressBar	scripts/Loader.ts	/^        const progressBar = new PIXI.Graphics();$/;"	C	method:Loader.createLoadingPage
progressBox	scripts/Loader.ts	/^        const progressBox = new PIXI.Graphics()$/;"	C	method:Loader.createLoadingPage
prompt	scripts/FinalScene.ts	/^        const prompt = new Prompt("You've been disconnected", PromptResponseType.NONE, undefined/;"	C	method:FinalScene.constructor
prompt	scripts/GameScene.ts	/^        const prompt = new Prompt("Are you sure you want to leave?", PromptResponseType.YESORNO,/;"	C	method:GameScene.onLeaveClick
prompt	scripts/GameScene.ts	/^        const prompt = new Prompt("Are you sure you want to switch?", PromptResponseType.YESORNO/;"	C	method:GameScene.onSwitchClick
promptBox	scripts/Prompt.ts	/^    promptBox : Sprite;$/;"	p	class:Prompt
pushSampleData	scripts/TestingManager.ts	/^    static pushSampleData()$/;"	m	class:TestingManager
radius	scripts/Slider.ts	/^        let radius = 0;$/;"	v
raiseBid	scripts/GameScene.ts	/^    raiseBid(amt : number)$/;"	m	class:GameScene
raiseButton	scripts/GameScene.ts	/^    raiseButton: Button;$/;"	p	class:GameScene
raisePanel	scripts/GameScene.ts	/^    raisePanel: RaisePanel;$/;"	p	class:GameScene
ratio	scripts/Player.ts	/^        const ratio = 0.9;$/;"	C
ratio	scripts/RaisePanel.ts	/^        let ratio = currentValue\/difference;$/;"	v
reason	scripts/DataTypes.ts	/^    reason : string;$/;"	p	class:ResultData
reasonText	scripts/ResultScene.ts	/^        const reasonText = new TextLabel(0, 0, 0, result.reason, 32, 0xffffff);$/;"	C
recievedMessage	scripts/FinalScene.ts	/^    recievedMessage(msgType: string, msgParams: any): void {$/;"	m	class:FinalScene
recievedMessage	scripts/GameScene.ts	/^    recievedMessage(msgType: string, data: any): void {$/;"	m	class:GameScene
recievedMessage	scripts/MainScene.ts	/^    recievedMessage(msgType: string, msgParams: any): void {$/;"	m	class:MainScene
recievedMessage	scripts/ReconnectScene.ts	/^    recievedMessage(msgType: string, data: any): void {$/;"	m	class:ReconnectScene
reconnectMsg	scripts/ReconnectScene.ts	/^    reconnectMsg : Prompt;$/;"	p	class:ReconnectScene
redColorCode	scripts/Globals.ts	/^    redColorCode : 0xcb5c62,$/;"	C
remove	scripts/Card.ts	/^    remove()$/;"	m	class:Card
remove	scripts/DataTypes.ts	/^    remove()$/;"	m	class:PlayerData
removePlayerFromList	scripts/Globals.ts	/^export const removePlayerFromList =(plID : number) => {$/;"	C
resetMainContainer	scripts/Scene.ts	/^    resetMainContainer()$/;"	m	class:Scene
resize	scripts/Scene.ts	/^    resize() : void$/;"	m	class:Scene
resources	scripts/Loader.ts	/^    resources : any;$/;"	p	class:Loader
result	scripts/DataTypes.ts	/^    result : string;$/;"	p	class:ResultData
resultBox	scripts/ResultScene.ts	/^        const resultBox = new Sprite(Globals.resources.resultBox.texture);$/;"	C
resultBoxes	scripts/ResultScene.ts	/^    resultBoxes : any = {};$/;"	p	class:ResultScene
resultContainer	scripts/ResultScene.ts	/^    resultContainer: Container;$/;"	p	class:ResultScene
resultHeader	scripts/ResultScene.ts	/^        const resultHeader = new Sprite(Globals.resources.resultHeader.texture);$/;"	C
resultStr	scripts/ResultScene.ts	/^        const resultStr = result.result.charAt(0).toUpperCase() + result.result.slice(1);$/;"	C
resultText	scripts/ResultScene.ts	/^        const resultText = new TextLabel(0, 0, 0, resultStr, 32, colorData[result.result.toLower/;"	C
sceneContainer	scripts/Scene.ts	/^    private sceneContainer : Container;$/;"	p	class:Scene
scoreBg	scripts/Player.ts	/^        const scoreBg = new Sprite(Globals.resources.playerChipBg.texture);$/;"	C
scoreText	scripts/ResultScene.ts	/^        const scoreText = new TextLabel(0, 0, 0, "0",32, 0xffffff);$/;"	C
secondaryTimer	scripts/Player.ts	/^        const secondaryTimer = new Sprite(Globals.resources.playerSecTimerBg.texture);$/;"	C
seconds	scripts/GameScene.ts	/^		const seconds = Math.floor(time % 60);$/;"	C	method:GameScene.updateTimer
segment	scripts/Player.ts	/^                const segment = segments[i];$/;"	C
segments	scripts/Player.ts	/^            const segments = [$/;"	C
selfPlayer	scripts/GameScene.ts	/^        const selfPlayer = initSelfPlayer();$/;"	C	method:GameScene.addSelfPlayer
sendMessage	scripts/SocketManager.ts	/^    sendMessage(payload: any) {$/;"	m	class:SocketManager
setActive	scripts/Keypad.ts	/^    setActive(value : boolean)$/;"	m	class:KeyPad
setButtonsVisual	scripts/GameScene.ts	/^    setButtonsVisual(bidState : BidState)$/;"	m	class:GameScene
setRandomTimeout	scripts/States/aiStates.js	/^    setRandomTimeout()$/;"	m	class:CollectState
setupUpdateFromNative	scripts/main.js	/^export function setupUpdateFromNative()$/;"	f
showCards	scripts/GameScene.ts	/^    showCards(cards: string[]) {$/;"	m	class:GameScene
showReconnectSceneTimeout	scripts/SocketManager.ts	/^    showReconnectSceneTimeout: NodeJS.Timeout | undefined;$/;"	p	class:SocketManager
slider	scripts/RaisePanel.ts	/^    slider: Slider;$/;"	p	class:RaisePanel
sliderValue	scripts/RaisePanel.ts	/^        const sliderValue = this.slider.value;$/;"	C	method:RaisePanel.constructor
socket	scripts/SocketManager.ts	/^    private socket : WebSocket | null = null;$/;"	p	class:SocketManager
sound	scripts/Loader.ts	/^            const sound = new Howl({$/;"	C	method:Loader.preloadSounds
sprite	scripts/Keypad.ts	/^           const sprite = new Sprite(Globals.resources[value].texture);$/;"	C	method:KeyPad.addButton
startTimer	scripts/ReconnectScene.ts	/^    startTimer()$/;"	m	class:ReconnectScene
staticData	scripts/LoaderConfig.ts	/^export const staticData = {$/;"	C
statusBG	scripts/Player.ts	/^        const statusBG = new Graphics();$/;"	C
subCard	scripts/ResultScene.ts	/^                const subCard = cards[i];$/;"	C
suit	scripts/Utilities.ts	/^    let suit = parseInt(cardId.split("-")[1]);$/;"	v
switchButton	scripts/GameScene.ts	/^    switchButton: Button;$/;"	p	class:GameScene
switchTable	scripts/GameScene.ts	/^    switchTable()$/;"	m	class:GameScene
testManager	scripts/MainScene.ts	/^        const testManager = new TestingManager(this.mainContainer);$/;"	C	method:MainScene.constructor
text	scripts/Keypad.ts	/^           const text = new TextLabel(0, 0, 0.5,value, 28);$/;"	C	method:KeyPad.addButton
textComponent	scripts/TestingManager.ts	/^        const textComponent = new TextLabel(x + width\/2, y + height\/2, 0.5, "Player "+i+"\\n"+/;"	C	method:TestingManager.createButton
textUpdate	scripts/InGameMessage.ts	/^    textUpdate(text : string)$/;"	m	class:InGameMessage
topY	scripts/appConfig.ts	/^	get topY() : number$/;"	C
transition	scripts/States/aiStates.js	/^        const transition = {$/;"	v	method:States.addTransition
transitions	scripts/States/aiStates.js	/^       this.transitions = []; $/;"	p	method:States.constructor
turnBegin	scripts/GameScene.ts	/^    turnBegin()$/;"	m	class:GameScene
turnSwitch	scripts/GameScene.ts	/^    turnSwitch(state : BidState)$/;"	m	class:GameScene
tween	scripts/Chip.ts	/^            const tween = new Tween(this).to(this.endPosition, 1000).easing(Easing.Quadratic.Out/;"	C	method:Chip.tween
tween	scripts/Chip.ts	/^        const tween = new Tween(this).to(potPosition, 1000).easing(Easing.Quadratic.Out).onCompl/;"	C	method:Chip.tweenToPot
tween	scripts/Chip.ts	/^    tween()$/;"	m	class:Chip
tween	scripts/Player.ts	/^        const tween = new TWEEN.Tween(this.lastValues)$/;"	C
tweenToPot	scripts/Chip.ts	/^    tweenToPot(potPosition : {x : number, y : number})$/;"	m	class:Chip
ua	scripts/Player.ts	/^        const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) \/ denominator;$/;"	C
ub	scripts/Player.ts	/^        const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) \/ denominator;$/;"	C
upHead	scripts/ResultScene.ts	/^        const upHead = new Sprite(Globals.resources.scoreWin.texture);$/;"	C
update	scripts/FinalScene.ts	/^    update(dt: number): void {$/;"	m	class:FinalScene
update	scripts/GameScene.ts	/^    update(dt: number): void {$/;"	m	class:GameScene
update	scripts/MainScene.ts	/^    update(dt: number): void {$/;"	m	class:MainScene
update	scripts/ReconnectScene.ts	/^    update(dt: number): void {$/;"	m	class:ReconnectScene
update	scripts/Scene.ts	/^    abstract update(dt:number) : void;$/;"	m	class:Scene
updateData	scripts/DataTypes.ts	/^    updateData(plId : number, balance : string)$/;"	m	class:PlayerData
updateFromNative	scripts/main.js	/^    global.updateFromNative = function updateFromNative(message)$/;"	f
updateFromNative	scripts/main.js	/^    global.updateFromNative = function updateFromNative(message)$/;"	f	variable:global
updateLabelText	scripts/TextLabel.ts	/^    updateLabelText(text : string, color : number = this.defaultColor)$/;"	m	class:TextLabel
updatePosition	scripts/Pot.ts	/^    updatePosition()$/;"	m	class:PotContainer
updatePot	scripts/Pot.ts	/^    updatePot(pot : potType[])$/;"	m	class:PotContainer
updateTimer	scripts/GameScene.ts	/^	updateTimer(time : number) {$/;"	m	class:GameScene
utf8_to_b64	scripts/Utilities.ts	/^export const utf8_to_b64 = (str : string) => window.btoa(encodeURIComponent(str));$/;"	C
value	scripts/RaisePanel.ts	/^            const value : number = parseFloat(parseFloat(inputValue).toFixed(2));$/;"	C	method:RaisePanel.onInputUpdate
ver	scripts/SceneManager.ts	/^        const ver = new TextLabel(10, 0, 0, "v0.0.04", 12, 0xffffff);$/;"	C
visual	scripts/Card.ts	/^    visual : Sprite;$/;"	p	class:Card
waitTimer	scripts/ReconnectScene.ts	/^    waitTimer: number;$/;"	p	class:ReconnectScene
width	scripts/Card.ts	/^    get width() : number$/;"	m	class:Card
width	scripts/Player.ts	/^                -width \/ 2 - lineSize, height \/ 2 + lineSize, \/\/ Bottom left$/;"	C
width	scripts/Player.ts	/^                [-width \/ 2 + lineSize, -height \/ 2 + lineSize, -width \/ 2 + lineSize, height/;"	C
width	scripts/Player.ts	/^                [-width \/ 2 + lineSize, -height \/ 2 + lineSize, width \/ 2 - lineSize, -height/;"	C
width	scripts/Player.ts	/^                [-width \/ 2 + lineSize, height \/ 2 - lineSize, width \/ 2 - lineSize, height \//;"	C
width	scripts/Player.ts	/^                [width \/ 2 - lineSize, -height \/ 2 + lineSize, width \/ 2 - lineSize, height \//;"	C
width	scripts/Player.ts	/^                width \/ 2 + lineSize, -height \/ 2 - lineSize, \/\/ Top right$/;"	C
width	scripts/Player.ts	/^                width \/ 2 + lineSize, height \/ 2 + lineSize, \/\/ Bottom right$/;"	C
width	scripts/Slider.ts	/^        let width = 0;$/;"	v
winding	scripts/Player.ts	/^            let winding = 0;$/;"	v
winner	scripts/DataTypes.ts	/^    winner : number | null$/;"	p	interface:potType
x	scripts/Globals.ts	/^  {x : 135, y : config.logicalHeight\/2 - 200},$/;"	C
x	scripts/Player.ts	/^            const x = Math.cos(phase - Math.PI \/ 2) * width;$/;"	C
x	scripts/Player.ts	/^        const x = x1 + ua * (x2 - x1);$/;"	C
x	scripts/ResultScene.ts	/^        let x =0\/\/ -resultBox.width\/2 + 100;$/;"	v
y	scripts/Globals.ts	/^  {x : config.logicalWidth - 135, y : config.logicalHeight\/2 - 200},$/;"	C
y	scripts/Globals.ts	/^  {x : config.logicalWidth - 135, y : config.logicalHeight\/2 - 550},$/;"	C
y	scripts/Globals.ts	/^  {x : config.logicalWidth - 300, y : config.logicalHeight\/2 - 120},$/;"	C
y	scripts/Globals.ts	/^  {x : config.logicalWidth - 300, y : config.logicalHeight\/2 - 470},$/;"	C
y	scripts/Player.ts	/^            const y = Math.sin(phase - Math.PI \/ 2) * height;$/;"	C
y	scripts/Player.ts	/^        const y = y1 + ua * (y2 - y1);$/;"	C
y	scripts/Player.ts	/^        let pos = {x : this.balanceText.x, y : this.balanceText.y};$/;"	v
y	scripts/ResultScene.ts	/^        const y = 0;$/;"	C
yesBtn	scripts/Prompt.ts	/^        const yesBtn = new Sprite(Globals.resources.yesBtn.texture);$/;"	C
